{
  "version": 3,
  "sources": ["../../src/index.ts"],
  "sourcesContent": ["import { Request } from 'express';\n\ninterface UserInfo {\n  id?: string;\n  name?: string;\n  bio?: string;\n  url?: string;\n  profileImage?: string;\n  roles?: Array<string>\n  teams?: Array<string>\n}\n\nfunction cleanHeader(headerName: string): keyof UserInfo {\n  return headerName.replace(\"x-replit-user-\", \"\").replace(/-(.)/g, function(_, group1) {\n    return group1.toUpperCase();\n  }) as keyof UserInfo\n}\n\n\nexport const getUserInfo = (req: Request): UserInfo | null => {\n  let { headers } = req\n  let userInfo: UserInfo = {}\n\n  for (let headerName of Object.keys(headers)) {\n    const headerValue = (headers as any)[headerName]\n    if (headerName.startsWith(\"x-replit-\") && headerValue) {\n      const cleanHeaderName: keyof UserInfo = cleanHeader(headerName)\n\n      //check if property is meant to be an array\n      if (cleanHeaderName === 'roles' || cleanHeaderName === 'teams') {\n        userInfo[cleanHeaderName] = headerValue.split(',') as string & string[]\n      } else {\n        userInfo[cleanHeaderName] = headerValue as string & string[]\n      }\n    }\n  }\n\n  //check if userInfo is empty\n  if (Object.keys(userInfo).length === 0 && userInfo.constructor === Object) {\n    return null\n  }\n  return userInfo\n}"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;AAYA,qBAAqB,YAAoC;AACvD,SAAO,WAAW,QAAQ,kBAAkB,IAAI,QAAQ,SAAS,SAAS,GAAG,QAAQ;AACnF,WAAO,OAAO;AAAA;AAAA;AAKX,MAAM,cAAc,CAAC,QAAkC;AAC5D,MAAI,EAAE,YAAY;AAClB,MAAI,WAAqB;AAEzB,WAAS,cAAc,OAAO,KAAK,UAAU;AAC3C,UAAM,cAAe,QAAgB;AACrC,QAAI,WAAW,WAAW,gBAAgB,aAAa;AACrD,YAAM,kBAAkC,YAAY;AAGpD,UAAI,oBAAoB,WAAW,oBAAoB,SAAS;AAC9D,iBAAS,mBAAmB,YAAY,MAAM;AAAA,aACzC;AACL,iBAAS,mBAAmB;AAAA;AAAA;AAAA;AAMlC,MAAI,OAAO,KAAK,UAAU,WAAW,KAAK,SAAS,gBAAgB,QAAQ;AACzE,WAAO;AAAA;AAET,SAAO;AAAA;",
  "names": []
}
